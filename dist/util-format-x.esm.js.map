{"version":3,"sources":["../src/util-format-x.js"],"names":[],"mappings":"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","file":"util-format-x.esm.js","sourcesContent":["import inspect from 'inspect-x';\n\nimport {stringify} from 'json3';\nimport safeToString from 'to-string-symbols-supported-x';\n\n/** @type {ArrayConstructor} */\nconst ArrayCtr = [].constructor;\n/** @type {NumberConstructor} */\nconst castNumber = (0).constructor;\n\nlet CIRCULAR_ERROR_MESSAGE;\nconst tryStringify = function _tryStringify(arg) {\n  try {\n    return stringify(arg);\n  } catch (err) {\n    // Populate the circular error message lazily\n    if (!CIRCULAR_ERROR_MESSAGE) {\n      try {\n        const a = {};\n        a.a = a;\n        stringify(a);\n      } catch (e) {\n        CIRCULAR_ERROR_MESSAGE = e.message;\n      }\n    }\n\n    if (err.name === 'TypeError' && err.message === CIRCULAR_ERROR_MESSAGE) {\n      return '[Circular]';\n    }\n\n    throw err;\n  }\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The format() method returns a formatted string using the first argument as a\n * printf-like format.\n *\n * The first argument is a string containing zero or more placeholder tokens.\n * Each placeholder token is replaced with the converted value from the\n * corresponding argument. Supported placeholders are as follows.\n *\n * %s - String.\n * %d - Number (integer or floating point value).\n * %i - Integer.\n * %f - Floating point value.\n * %j - JSON. Replaced with the string '[Circular]' if the argument contains circular references.\n * %% - Single percent sign ('%'). This does not consume an argument.\n *\n * @param {string} f - Template.\n * @param {*} [...args] - Values.\n * @returns {*} The target.\n */\n// eslint-enable jsdoc/check-param-names\nconst format = function _format(f) {\n  if (typeof f !== 'string') {\n    const objects = new ArrayCtr(arguments.length);\n    for (let index = 0; index < arguments.length; index += 1) {\n      /* eslint-disable-next-line prefer-rest-params */\n      objects[index] = inspect(arguments[index]);\n    }\n\n    return objects.join(' ');\n  }\n\n  if (arguments.length === 1) {\n    return f;\n  }\n\n  let str = '';\n  let a = 1;\n  let lastPos = 0;\n  for (let i = 0; i < f.length; ) {\n    if (f.charCodeAt(i) === 37 /* '%' */ && i + 1 < f.length) {\n      if (f.charCodeAt(i + 1) !== 37 /* '%' */ && a >= arguments.length) {\n        i += 1;\n        /* eslint-disable-next-line no-continue */\n        continue;\n      }\n\n      switch (f.charCodeAt(i + 1)) {\n        case 100: // 'd'\n          if (lastPos < i) {\n            str += f.slice(lastPos, i);\n          }\n\n          /* eslint-disable-next-line prefer-rest-params */\n          str += castNumber(arguments[a]);\n          a += 1;\n          break;\n\n        case 105: // 'i'\n          if (lastPos < i) {\n            str += f.slice(lastPos, i);\n          }\n\n          /* eslint-disable-next-line prefer-rest-params */\n          str += parseInt(arguments[a], 10);\n          a += 1;\n          break;\n\n        case 102: // 'f'\n          if (lastPos < i) {\n            str += f.slice(lastPos, i);\n          }\n\n          /* eslint-disable-next-line prefer-rest-params */\n          str += parseFloat(arguments[a]);\n          a += 1;\n          break;\n\n        case 106: // 'j'\n          if (lastPos < i) {\n            str += f.slice(lastPos, i);\n          }\n\n          /* eslint-disable-next-line prefer-rest-params */\n          str += tryStringify(arguments[a]);\n          a += 1;\n          break;\n\n        case 115: // 's'\n          if (lastPos < i) {\n            str += f.slice(lastPos, i);\n          }\n\n          /* eslint-disable-next-line prefer-rest-params */\n          str += safeToString(arguments[a]);\n          a += 1;\n          break;\n\n        case 37: // '%'\n          if (lastPos < i) {\n            str += f.slice(lastPos, i);\n          }\n\n          str += '%';\n          break;\n\n        default:\n          // any other character is not a correct placeholder\n          if (lastPos < i) {\n            str += f.slice(lastPos, i);\n          }\n\n          str += '%';\n          i += 1;\n          lastPos = i;\n          /* eslint-disable-next-line no-continue */\n          continue;\n      }\n\n      i += 2;\n      lastPos = i;\n      /* eslint-disable-next-line no-continue */\n      continue;\n    }\n\n    i += 1;\n  }\n\n  if (lastPos === 0) {\n    str = f;\n  } else if (lastPos < f.length) {\n    str += f.slice(lastPos);\n  }\n\n  while (a < arguments.length) {\n    /* eslint-disable-next-line prefer-rest-params */\n    const x = arguments[a];\n    a += 1;\n\n    if (x === null || (typeof x !== 'object' && typeof x !== 'symbol')) {\n      str += ` ${x}`;\n    } else {\n      str += ` ${inspect(x)}`;\n    }\n  }\n\n  return str;\n};\n\nexport default format;\n"]}